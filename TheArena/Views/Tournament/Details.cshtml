@model TheArena.ViewModels.TournamentDetailViewModel
@{
    ViewBag.Title = "Details";
}

<div class="row">
    <div class="col-12">
        <div class="">
            <h1 class="text-center">
                @Html.DisplayFor(model => model.tournament.Name)

                @if (Model.tournament.Geek.Username == User.Identity.Name)
                {
                    <a href="../Edit/@Html.DisplayFor(model => model.tournament.TournamentId)">@Html.Raw("<button type=\"button\" class=\"btn btn - outline - success\"><span class=\"fas fa - cog\"></span></button>")</a>
                }
                else if (User.Identity.IsAuthenticated)
                {
                    bool canAdd = true;
                    int canLeave = 0;
                    var haveTeams = false;
                    foreach (var teamgeek in Model.geek.TeamGeek)
                    {
                        haveTeams = true;
                        foreach (var participation in Model.tournament.Participation)
                        {
                            if (teamgeek.Team1.TeamId == participation.Team && !teamgeek.Deleted && !participation.Deleted)
                            {
                                canAdd = false;
                                if (teamgeek.Team1.Geek.Username == User.Identity.Name)
                                {
                                    canLeave = teamgeek.Team1.TeamId;
                                }
                            }
                        }
                    }
                    if (Model.tournament.PeriodPlay.Start < DateTime.Now || Model.tournament.PeriodRegistration.Ending < DateTime.Now || Model.tournament.PeriodRegistration.Start > DateTime.Now)
                    {
                        canAdd = false;
                    }
                    if (canAdd && haveTeams)
                    {
                        using (Html.BeginForm("Participate", "Tournament", new { Id = Model.tournament.TournamentId }, FormMethod.Post, new { @class = "form-inline" }))
                        {@Html.AntiForgeryToken()
                        <select class="form-control" name="teamId">
                            @foreach (var team in Model.geek.Team)
                            {
                                <option value="@team.TeamId">@team.Name</option>
                            }
                        </select>
                        <input type="submit" class="btn btn-outline-success" value="Participer" />
                    }
                }
                if (canLeave != 0)
                {
                    using (Html.BeginForm("Abandon", "Tournament", new { Id = Model.tournament.TournamentId }, FormMethod.Post, new { @class = "form-inline" }))
                    {
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="teamId" value="@canLeave" />
                        <input type="submit" class="btn btn-outline-danger" value="Abandonner" />
                    }
                }
            }
            </h1>
            <h6 class="text-center">Organisé par <b>@Html.DisplayFor(model => model.tournament.Geek.Username)</b></h6>
            <h6 class="text-center">
                @if (Model.tournament.PeriodPlay.Start < DateTime.Now && Model.tournament.PeriodPlay.Ending > DateTime.Now)
                {
                    <span class="badge badge-success">Tournoi en cours</span>
                }
                else if (Model.tournament.PeriodPlay.Ending < DateTime.Now)
                {
                    <span class="badge badge-danger">Tournoi terminé</span>
                }
            </h6>
            <div class="dropdown-divider"></div>
        </div>
        <div class="row justify-content-between">
            <div class="col-5 text-center">
                <p class="m-0"><small>Débute le</small></p>
                <p><span class="fa fa-clock"></span>@Model.tournament.PeriodPlay.Start</p>
            </div>
            <div class="col-5 text-center">
                <p class="m-0"><small>Termine le</small></p>
                <p><span class="fa fa-clock"></span>@Model.tournament.PeriodPlay.Ending</p>
            </div>
        </div>
    </div>
</div>
<div class="row">

    <div class="pt-lg-5 col-lg-3 text-center">
        <h3> Jeu sélectionné :</h3>
        <p>@Html.DisplayFor(model => model.tournament.Game1.Name)</p>
        <h4> Type de jeu :</h4>
        <p>@Html.DisplayFor(model => model.tournament.Game1.GameType)</p>
        <h4> Limite d'âge :</h4>
        <p>@Html.DisplayFor(model => model.tournament.Game1.AgeLimit)</p>
    </div>
    <div class="pl-3 col-lg-9">
        <div>
            <h5>Description</h5>
            @Html.DisplayFor(model => model.tournament.Rules)
            <h5 class="card-title">Paramètre des équipes</h5>
            <p class="card-text">Taille des équipes : <b>@Html.DisplayFor(model => model.tournament.PlayerNumber)</b></p>
            <p class="card-text">Nombre d'équipes : <b>@Html.DisplayFor(model => model.tournament.Slots)</b></p>
            <p class="card-text">
                Période d'inscription : <b>@Model.tournament.PeriodRegistration.Start</b> au
                <b>@Model.tournament.PeriodRegistration.Ending</b>
                <h6 class="text-center">
                    @if (Model.tournament.PeriodRegistration.Start < DateTime.Now && Model.tournament.PeriodRegistration.Ending > DateTime.Now)
                    {
                        <span class="badge badge-success">Inscription ouvertes</span>
                    }
                </h6>
            </p>

            <h3>Equipes participantes : </h3>
            @foreach (var item in Model.tournament.Participation)
            {
                if (!item.Deleted)
                {
                    <div class="card-body">
                        @Html.DisplayFor(m => item.Team1.Name)
                    </div>
                }
            }
        </div>
    </div>
</div>
